#include "huffman.h"
#include <iostream>
#include <vector>
#include <queue>
#include <map>
#include <string>
#include <fstream>
#include <cstring>

int main(int argc, char* argv[]) {
	if (strcmp(argv[1], "-u") == 0) {
		if (strcmp(argv[2], "-f") != 0 && strcmp(argv[2], "--file") != 0) {
			exit(-1);
		}
		char* file1 = argv[3];
		if (strcmp(argv[4], "-o") != 0 && strcmp(argv[4], "--output") != 0) {
			exit(-1);
		}
		char* file2 = argv[5];
		std::ifstream fin(file1, std::ios::binary | std::ios::in);
		std::ofstream fout(file2);
		if (fin.peek() == std::ifstream::traits_type::eof()) {
			std::cout << "file is empty\n";
			return -1;
		}
		HuffmanDecoder dec(fout, fin);
		dec.print();
		fin.close(); fout.close();

	} else if (strcmp(argv[1], "-c") == 0) {
		if (strcmp(argv[2], "-f") != 0 && strcmp(argv[2], "--file") != 0) {
			exit(-1);
		}
		char* file1 = argv[3];
		if (strcmp(argv[4], "-o") != 0 && strcmp(argv[4], "--output") != 0) {
			exit(-1);
		}
		char* file2 = argv[5];
		HuffmanTree tree;
		std::ifstream in(file1);
		std::ofstream out(file2, std::ios::binary | std::ios::out);
		std::vector<char> symbols;
		if (in.peek() == std::ifstream::traits_type::eof()) {
			std::cout << "file is empty\n";
			return -1;
		}
		char c;
		while (in.read(&c, sizeof(char))) {
			std::cout << "1\n";
			symbols.push_back(c);
		}	
		for (std::size_t i = 0; i < symbols.size(); i++) {
			tree.add_element(symbols[i]);
		}
		
		tree.build_tree();
		HuffmanArchiver arc(symbols, tree.get_table(), out);
		arc.print();
	} else {
		exit(-1);
	}

	return 0;
}
