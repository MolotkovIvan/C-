#include "employees.h"
#include <iostream>
#include <string>
#include <cstring>
/*Employee::Employee(char* name, int32_t base_salary) {
	_name = name;
	_base_salary = base_salary;
}*/

EmployeesArray::EmployeesArray() {
	_cp = 1;
	_len = 0;
	_employees = new Employee*[1];
}

Developer::Developer(char* name, int32_t base_salary, bool has_bonus) {
	_name = name;
	_base_salary = base_salary;
	_has_bonus = has_bonus;
}

SalesManager::SalesManager(char* name, int32_t base_salary, int32_t sold_nm, int32_t price) {
	_name = name;
	_base_salary = base_salary;
	_sold_nm = sold_nm;
	_price = price;
}

void EmployeesArray::add(const Employee* e) {
	if (_len == _cp) {
		Employee** buf = new Employee*[_cp];
		for (int i = 0; i < _len; i++) buf[i] = _employees[i];
		delete [] _employees;
		_employees = new Employee*[_cp*2];
		for (int i = 0; i < _len; i++) _employees[i] = buf[i];
		delete [] buf;
		_cp *= 2;

	}
//	std::cout << *e << "\n";
	_employees[_len++] = (Employee*)e;
}

int EmployeesArray::total_salary() const {
	int sum = 0;
	for (int i = 0; i < _len; i++) {
		sum += _employees[i]->salary();
	}
	return sum;
}

std::ostream& operator<<(std::ostream& os, const Employee& e) {
	e.print(os);
	return os;
}

std::istream& operator>>(std::istream& is, Developer& employee) {
	std::string tmp_name;
	int bonus;
	is >> tmp_name >> employee._base_salary >> bonus;
	bonus == 0 ? employee._has_bonus = false : employee._has_bonus = true;
	employee._name = new char[tmp_name.size()];
	strcpy(employee._name, tmp_name.c_str());
	return is;
}

std::istream& operator>>(std::istream& is, SalesManager& employee) {
	std::string tmp_name;
	is >> tmp_name >> employee._base_salary >> employee._sold_nm >> employee._price;
	employee._name = new char[tmp_name.size()];
	strcpy(employee._name, tmp_name.c_str());
	return is;
}

void Developer::print(std::ostream& os) const {
	char bonus;
	_has_bonus == false ? bonus = '-' : bonus = '+';
	os << "Developer\n";
	os << "Name: " << _name << "\n"; 
	os << "Base salary: " << _base_salary << "\n";
	os << "Has bonus: " << bonus;
}

void SalesManager::print(std::ostream& os) const {
	os << "Sales Manager\n";
	os << "Name: " << _name << "\n"; 
	os << "Base salary: " << _base_salary << "\n";
	os << "Sold items: " << _sold_nm << "\n";
	os << "Item price: " << _price;
}

std::ostream& operator<<(std::ostream& os, const EmployeesArray& arr) {
	for (int i = 0; i < arr._len; i++) {
		os << (i+1) << ". " << *(arr._employees[i]) << "\n";
	}
	os << arr.total_salary() << "\n";
	return os;
}
